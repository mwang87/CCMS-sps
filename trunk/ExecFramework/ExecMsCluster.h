#ifndef __ExecMsCluster_H__
#define __ExecMsCluster_H__

// External Includes
#include "ExecBase.h"
#include "SpecSet.h"
#include "ClusterSet.h"

// System Includes
#include <string>
#include <vector>

namespace specnets
{
  class ClusterSet;

  // Module used constants

  /*! \brief MsCluster invoke class.

   Contains methods for preparing data for MsCluster and invokes it.

   */
  class ExecMsCluster : public specnets::ExecBase
  {
  public:

    //! \name CONSTRUCTORS
    //@{
    /*! \brief The exemplar constructor.

     Generally this constructor should not be used. It is only used by the
     module execution factory in order to create an exemplar object (without
     valid parameters) which is then used to create a real (valid) object
     using the clone() method.
     @sa clone()
     */
    ExecMsCluster(void);

    /*! \brief The default constructor

     This is the default constructor. A valid set of parameters must be
     supplied in the input parameter. The parameters can then be verified
     using the validateParams() method.
     @sa validateParams()
     @param inputParams structure containing all input parameters necessary for execution
     */
    ExecMsCluster(const ParameterList & inputParams);

    /*!
     Constructor for passing input data. The parameters can then be verified
     using the validateParams() method.
     @sa validateParams()
     @param inputParams structure containing all input parameters necessary for execution
     @param inputSpectraPaths paths to individual spectra files
     */
    ExecMsCluster(const ParameterList & inputParams,
                  vector<string> *inputSpectraPaths);

    /*!
     Constructor for passing input and output data. The parameters can then be verified
     using the validateParams() method.
     @sa validateParams()
     @param inputParams structure containing all input parameters necessary for execution
     @param inputSpectraPaths paths to individual spectra files
     @param outputClusters where the output scan # mappings will be stored
     @param outputClusteredSpectra where the output clustered spectra will be stored
     */
    ExecMsCluster(const ParameterList & inputParams,
                  vector<string> *inputSpectraPaths,
                  ClusterSet *outputClusters,
                  SpecSet *outputClusteredSpectra);
    //@}

    //! \name DESTRUCTOR
    //@{
    virtual ~ExecMsCluster(void);
    //@}

    //! \name ACCESSORS
    //@{
    /*! \brief Creates a new module of the virtual class with the given params.

     The parameters should be sufficient for the derived class to be invoked properly.

     @return A pointer to the newly created object
     */
    virtual ExecBase * clone(const ParameterList & input_params) const;

    //@}

    //! \name MODIFIERS
    //@{
    /*! \brief Executes the module.

     In order to call this method succesfully all the necessary data for
     execution must already be loaded into memory (data members). This can
     be accomplished using the loadInputData() method.

     @return True if execution finished successfully, false otherwise.
     @sa loadInputData()
     */
    virtual bool invoke(void);

    /*! \brief Loads the input data from the files specified in the params.

     Loads all the data from files into the data members. This method is
     primarily used by the execution module to load necessary data when
     executing in a separate process..

     @return True if data was loaded successfully, false otherwise.
     @sa ExecBase(const ParameterList & input_params), saveOutputData()
     */
    virtual bool loadInputData(void);

    /*! \brief Saves all the result data to files specified in the params.

     Saves all the result data generated by the module to files specified
     by values in the params. This is used to either save the data permanantly,
     or to be loaded back in after remote execution is finished and results
     need to be merged by the merge() method.

     @param filenames A list of file names that contain the data necessary to run the module
     @return True if data was saved successfully, false otherwise.
     @sa ExecBase(const ParameterList & input_params), loadInputData(), merge()
     */
    virtual bool saveOutputData(void);

    /*! \brief Saves all the internal data into files specified in the params.

     Saves all the data required for an external process to execute the
     module. The external process would call loadInputData() to reload the
     data into the members before calling invoke(). The user passes a vector
     that will contain the names of all files necessary to run the module as
     a separate process. The first file in this list will always be the main
     parameter file.

     @param filenames A list of file names that contain the data necessary to run the module
     @return True if data was saved successfully, false otherwise.
     @sa ExecBase(const ParameterList & input_params), loadInputData()
     */
    virtual bool saveInputData(std::vector<std::string> & filenames);

    /*! \brief Loads the output data from the files specified in the params.

     Loads all the data from output files into the data members. The purpose
     of this is to ready "child" modules to be merged back together after
     being executed separately.

     @return True if data was loaded successfully, false otherwise.
     @sa ExecBase(const ParameterList & input_params), saveOutputData()
     */
    virtual bool loadOutputData(void);

    /*! \brief Splits the module into multiple "children" for parallel execution.

     Divides the work required by the module into a vector of sub-modules
     that can be executed in parallel (by the the ParallelExecution() class.

     @param numSplit Number of separate modules to split into
     @return The set of sub-modules (children) that the original module has been split into.
     An empty vector implies an error.
     @sa merge()
     */
    virtual std::vector<ExecBase *> const & split(int numSplit);

    /*! \brief Merges the child modules back into a complete result

     This method is only called when split is used for parallel execution
     and after the execution of all children has been completed. This method
     will merge the results generated by each of the child modules into
     one cohesive result as if the module had been run as a single entity.

     @return True if merge could be performed successfully, false otherwise.
     @sa split(int numSplit)
     */
    virtual bool merge(void);

    /*! \brief Performs validation of the input parameters.

     Checks the parameters structure provided in the constructor to see if they
     are sufficient and correct to invoke the module. Also sets the internal
     validity flag so that isValid() will return the correct result.

     @param error A description of the error (if any occurs)
     @return True if the parameters for the module are valid, false otherwise.
     @sa isValid()
     */
    virtual bool validateParams(std::string & error);
    //@}

  protected:

    // Module used constants
    static const string TMP_DIRECTORY;
    static const string OUT_DIRECTORY;
    static const string MGF_DIRECTORY;
    static const string CLUST_DIRECTORY;
    static const string CLUSTERS_FILE_PREFIX;

    bool ownInput; // does this object own the right to de-allocate input data
    vector<string> *m_inputSpectraPaths; // Paths to individual MS/MS spectra files, which are processed one file at a time to reduce memory usage.

    bool ownOutput; // does this object own the right to de-allocate output data
    ClusterSet *m_outputClusters; // Set of scan # mappings that encodes clusters
    SpecSet *m_outputClusteredSpectra; // Merged set of clustered spectra. We assume this is small enough to load into memory after clustering


    /**
     * Prepares the temporary input files for MSCluster
     * @param tempDir temporary directory to hold all input files to MSCluster
     * @param inputSpectrumInfo this will be filled with spectrum header information for all input un-clustered spectra to MSCluster
     * @param msClusterInputFileList this will be filled with the path to the file that will contain all input spectra filenames to MSCluster
     * @return true if all files were loaded/saved successfully, false if not
     */
    bool formatMsClusterInput(const string &tempDir,
                              vector<SpecSet> &inputSpectrumInfo,
                              string &msClusterInputFileList);

    /**
     * Converts the temporary output files of MSCluster into ClusterSet, also re-sets spectrum headers for clustered spectra
     * @param clustDir output directory of MSCluster containg the clustering mappings
     * @param inputSpectrumInfo the spectrum header information from un-clustered MS/MS spectra
     * @return true if all files were loaded successfully and parsed, false if not
     */
    bool formatMsClusterOutput(const string &clustDir,
                               vector<SpecSet> &inputSpectrumInfo);

    // Calls MsCluster
    // exeDir: base directory
    int callMsCluster(const string &exeDir,
                      const string &msClusterInputFileList,
                      const string &tempDir,
                      const string &outDir,
                      const string &baseDir);

    static bool clusterFilenameSort(const string &a, const string &b);
  };

} // namespace specnets


#endif

